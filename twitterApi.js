// twitterAPI grafos
// created by: arthur12320
// created at: 8/5/19
// last modified at: 8/5/19

//obs:
// using this node package: 
// github: https://github.com/BoyCook/TwitterJSClient
// npm: 
const Twitter = require('twitter-node-client').Twitter;
const fs = require('fs');
var id_atual = '0'
const {
    consumerKey,
    consumerSecret,
    accessToken,
    accessTokenSecret,
    callBackUrl
} = require('./yourData');

var config = {
    consumerKey,
    consumerSecret,
    accessToken,
    accessTokenSecret,
    callBackUrl
}




var twitter = new Twitter(config);

//code logic starts here -->
var users = {count:0, total_count:0}
let users_id = ["2430285995","3130879425","113080226","804495149527080960","2573848271","54614803","54614803","113080226","850057071261306880","54614803","198493682","200134333","40402812","278794735","365563279","57471103","57471103","365563279","178423972","1103353894581743617","365563279","1029342240446050309","807173701821202433","3569023829","3130879425","365563279","157793044","2196378127","54614803","1029342240446050309","713427102071128066","807173701821202433","365563279","3130879425","365563279","2386543767","2386543767","365563279","365563279","83835489","2573848271","1024109619013189632","42161236","42161236","760696832590839808","713427102071128066","2196378127","1118144204","79056628","466415651","466415651","40917765","883743840372445184","200134333","807173701821202433","883743840372445184","1135526970","224679798","411705134","166768159","166768159","730243429670785024","209829243","57471103","2920900299","209829243","440033222","1100291322","1109246388309766146","77490742","77490742","52535848","1109246388309766146","3569023829","58289430","3569023829","209829243","56895491","200134333","1097146761766944768","54614803","52535848","1109246388309766146","633978992","209829243","1103472402435112960","724343534141231105","2645215107","2712919035","440033222","2507463792","9353542","73146918","54614803","209829243","782368862574608384","804495149527080960","724343534141231105","228147076","200134333","1109246388309766146","2817010259","200134333","1055090724297994240","804495149527080960","804495149527080960","62166992","62166992","1024109619013189632","1052195981041786880","850057071261306880","178423972","85339442","1087268381936549888","1087268381936549888","280800278","58289430","782280247152668672","40402812","466415651","3130879425","57471103","1087268381936549888","181932485","217127041","1087268381936549888","2507463792","145730277","801223414153433088","309324308","209829243","57471103","309324308","209829243","200134333","309324308","2829901776","1104556469243035648","209829243","3130879425","1087535073673523205","52535848","2390993290","2829901776","807173701821202433","219315281","219315281","40402812","880448864125431808","112716875","145035071","767424719813476353","1416264314","363721351","56895491","56895491","863422441481261062","1087268381936549888","47775560","187691398","163874647","89859784","467625565","843824797935157248","289141064","1052195981041786880","760696832590839808","883237951282565120","56895491","467625565","411705134","292045126","1087268381936549888","807173701821202433","90702777","2589994706","1087268381936549888","1062531196062781440","1113487356403830786","1087268381936549888","829844010101506048","1052195981041786880","1052195981041786880","81534786","68711011","56895491","828730866494996480","3142267313","121162697","188830945","2745968536","807173701821202433","807173701821202433","807173701821202433","90702777","3387897971","3142267313","1027730315400372224","129356872","1109246388309766146","320386932","320386932","2396568182","359586746","2390993290","4796635175","3387897971","807173701821202433","4796635175","359586746","81534786","81534786","4796635175","843824797935157248","121526988","3998726601","1088980395855622144","3998726601","271227293","880448864125431808","4902619918","4902619918","880448864125431808","1124793258813612032","2405430481","4796635175","219315281","1011031674061250560","1247701160","162912665","162912665","1109246388309766146","2745968536","1247701160","760696832590839808","4796635175","278794735","4796635175","252306496","52206923","760696832590839808","3328632310","47659022","85339442","1129052779295760384","188830945","62436427","81534786","56895491","62436427","219315281","252306496","801223414153433088","252306496","1055090724297994240","117315626","613072581","613072581","231877177","254630183","760696832590839808","1938804577","178423972","140565871","96328077","121526988","2213575189","252306496","270061820","1083202966700675072","850057071261306880","129356872","1030824376197898241","62436427","1083202966700675072","83835489","760696832590839808","104655604","280233017","160987687","92329213","59258926","209829243","1129052779295760384"]
var contador = 0;
id_atual = users_id.pop()
run();



function run() {
    if(users_id.length > 0){
        getUserFollowersList(id_atual)
    }
}



function getUserFollowersList (user_id) {
    if(typeof users[user_id] === 'undefined'){

        users[user_id] = { followers:[]}
    }
    let user = users[user_id]
    let params = {
        user_id: user_id,
        stringify_ids:true,
        count:5000,
    }
    twitter.getCustomApiCall(`/friends/ids.json`,params, error, (res)=>{
        contador++;
        let response = JSON.parse(res);
        user.followers = userFromRes(response)
        users.count++;
        users.total_count = users.total_count + user.followers.length
        console.log(users.total_count)
        if(contador >= 15){
            error()
            contador = 0;
            run()
        }else{
            id_atual = users_id.pop()
            run()
            if(users.total_count >= 50000){ //Number of friends
                let fs = require("fs");
                let data = JSON.stringify(users);

                fs.writeFile("temp.txt", data, (err) => { //writes file with all twitter data
                    if (err) console.log(err);
                    console.log("Successfully Written to File.");
                });
                contador = 15;
            }
        }
    });
}



function error (err, response, body) {
    console.log(`error handled`)
    console.log('err:',err);
    console.log('Please, wait.');
    console.log("VETOR RESTANTE", users_id)
    console.log("ID ATUAL", id_atual)
    sleep(910000)
    console.log("FIM DO SLEEP")
};

function userFromRes (users){
    return users.ids
}


function sleep(miliseconds) {
    var currentTime = new Date().getTime();
    while (currentTime + miliseconds >= new Date().getTime()) {
    }
}
